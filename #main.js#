let vertexShaderSource = `
precision mediump float;

uniform mat4 uMatrix;
uniform vec2 uResolution;

attribute vec2 aPosition;
attribute vec2 aTexCoord;

varying vec4 vColor;
varying vec2 vTexCoord;

void main()
{
	vec2 finalPos = aPosition / uResolution;
	vec4 scaledPos = uMatrix * vec4(finalPos, 0, 1);
	finalPos = (scaledPos.xy * 2.0) - 1.0;
	gl_Position = vec4(finalPos.x, -finalPos.y, 0, 1);

	vTexCoord = aTexCoord;
}`;

let fragmentShaderSource = `
precision mediump float;

uniform sampler2D uTexture;
varying vec2 vTexCoord;

void main()
{
	gl_FragColor = texture2D(uTexture, vTexCoord);
}`;

function v2(x, y)
{
	this.x = x;
	this.y = y;
}
function getUV(topLeftUV, bottomRightUV)
{
	let UV = [
		[    topLeftUV.x,     topLeftUV.y],
		[bottomRightUV.x,     topLeftUV.y],
		[    topLeftUV.x, bottomRightUV.y],
		[bottomRightUV.x, bottomRightUV.y]
	];
	return UV;
}
function getTilePos(pixelPos, tileSize)
{
	return new v2(
		Math.floor(pixelPos.x/tileSize),
		Math.floor(pixelPos.y/tileSize)
	);
}
function getTile(tilemap, width, pos)
{
	return tilemap[width * pos.y + pos.x];
}
function setTile(tilemap, width, pos, value)
{
	tilemap[width * pos.y + pos.x] = value;	
}
function log(...msg) {
	console.log(...msg);
}

class Entity
{
	constructor(type, x, y, solid, uv)
	{
		this.type = type;
		this.pos = new v2(x,y);
		this.solid = solid;
		this.uv = uv;
	}
}

function loadTexture(url)
{
	let texture = gl.createTexture();
	const image = new Image();
	image.src = url;
	image.onload = e =>
	{
		gl.bindTexture(gl.TEXTURE_2D, texture);
		gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);
		gl.generateMipmap(gl.TEXTURE_2D);
	};
	return texture;
}

class Attrib
{
	constructor(name, count, offset)
	{
		this.name = name;
		this.count = count;
		this.offset = offset;
		this.location = null;
	}
	setupLocation(program)
	{
		this.location = gl.getAttribLocation(program, this.name);
	}
}
class Uniform
{
	constructor(func, name)
	{
		this.func = func;
		this.name = name;
		this.location = 0;
	}

	set(args)
	{
		switch(this.func)
		{
			case 'uniform2f':
				gl.uniform2f(this.location, ...args);
				break;
			case 'uniform1i':
				gl.uniform1i(this.location, args);
				break;
			case 'uniformMatrix4fv':
				gl.uniformMatrix4fv(this.location, ...args);
				break;
		}
	}

	setupLocation(program)
	{
		this.location = gl.getUniformLocation(program, this.name);
	}
}
class Program
{
	constructor(vshader, fshader, bytesPerVertex, attribs, uniforms)
	{
		this.bytesPerVertex = bytesPerVertex;
		this.attribs = attribs;
		this.uniforms = uniforms;

		this.ID = gl.createProgram();
		gl.attachShader(this.ID, vshader);
		gl.attachShader(this.ID, fshader);
		gl.linkProgram(this.ID);

		this.attribs.forEach(attrib =>
		{
			attrib.setupLocation(this.ID);
			gl.enableVertexAttribArray(attrib.location);
		});

		this.uniforms.forEach(uniform =>
		{
			uniform.setupLocation(this.ID);
		});
	}

	setAttribs()
	{
		gl.useProgram(this.ID);
		this.attribs.forEach(attrib =>
		{
			gl.vertexAttribPointer(
				attrib.location,
				attrib.count,
				gl.FLOAT,
				false,
				this.bytesPerVertex,
				attrib.offset
			);
		});
	}

	setUniform(name, args)
	{
		gl.useProgram(this.ID);
		this.uniforms.forEach(uniform =>
		{
			if(uniform.name == name) uniform.set(args);
		});
	}
}
function createShader(type, source)
{
	const shader = gl.createShader(type);
	gl.shaderSource(shader, source);
	gl.compileShader(shader);
	return shader;
}
function bindArrayBuffer(buffer) {
	gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
}
function bindElementBuffer(buffer) {
	gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer);
}
function fillVertexBuffer(sourceData) {
	gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(sourceData), gl.STATIC_DRAW);
}
function fillIndexBuffer(sourceData) {
	gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(sourceData), gl.STATIC_DRAW);
}

function drawBuffer(drawMode, count, usesIndices)
{
	if(usesIndices)
		gl.drawElements(drawMode, count, gl.UNSIGNED_SHORT, 0);
	else
		gl.drawArrays(drawMode, 0, count);
}

function fillEntityVertexData(target, entity, tileSize)
{
	let x = entity.pos.x,
		y = entity.pos.y;
	let x0 = x,
		x1 = x + tileSize,
		y0 = y,
		y1 = y + tileSize;

	let UV = entity.uv;
	UV = getUV(UV[0], UV[1]);
	
	target.push(
		x0, y0, ...UV[0],
		x1, y0, ...UV[1],
		x0, y1, ...UV[2],
		x1, y1, ...UV[3]
	);
}
function fillEntitiesVertexData(target, entities, tileSize)
{
	for(let entityIndex = 0;
		entityIndex < entities.length;
		entityIndex++)
	{
		let entity = entities[entityIndex];
		fillEntityVertexData(target, entity, tileSize);
	}
}

function fillRectIndexData(target, count)
{
	for(let index = 0;
		index < count;
		index += 4)
	{
		target.push(
			index+0, index+1, index+2,
			index+1, index+2, index+3
		);
	}
}

const canvas = document.getElementById('game-canvas');
let TILE_SIZE = 32;
const TX_ATLAS_DIM = 128;
const TEXTURE_TILE_SIZE = 32;
canvas.width = 2*TILE_SIZE*16;
canvas.height = 2*TILE_SIZE*12;
const gl = canvas.getContext('webgl', {
	premultipliedAlpha: false
});

if(!gl) throw new Error('WebGL is not supported.');

gl.enable(gl.BLEND);
gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);

const mat4 = glMatrix.mat4;
const floatSize = Float32Array.BYTES_PER_ELEMENT;
const int32size = Int32Array.BYTES_PER_ELEMENT;
let canvasWidth = gl.canvas.width;
let canvasHeight = gl.canvas.height;

const KEYSTATE_UP = 0,
	  KEYSTATE_DOWN = 1,
	  KEYSTATE_RELEASE = 2,
	  KEYSTATE_PRESS = 3;
let KEY_W = 0, KEY_A = 1,
	KEY_S = 2, KEY_D = 3,
	KEY_Z = 4;
let rawInput = [0,0,0,0,0];
let oldRawInput = [0,0,0,0,0];
let input = [0,0,0,0,0];

document.onkeypress = e =>
{
	switch(e.key)
	{
		case 'w': rawInput[KEY_W] = 1; break;
		case 'a': rawInput[KEY_A] = 1; break;
		case 's': rawInput[KEY_S] = 1; break;
		case 'd': rawInput[KEY_D] = 1; break;
		case 'z': rawInput[KEY_Z] = 1; break;
	};
};
document.onkeyup = e =>
{
	switch(e.key)
	{
		case 'w': rawInput[KEY_W] = 0; break;
		case 'a': rawInput[KEY_A] = 0; break;
		case 's': rawInput[KEY_S] = 0; break;
		case 'd': rawInput[KEY_D] = 0; break;
		case 'z': rawInput[KEY_Z] = 0; break;
	};
};

let black = [0,0,0];
let txAtlas = loadTexture(`assets/texture_atlas.png`);
const TX_TILE_W = TEXTURE_TILE_SIZE / TX_ATLAS_DIM,
	  TX_TILE_H = TEXTURE_TILE_SIZE / TX_ATLAS_DIM;

const
	TX_DIRT = [
		new v2(0*TX_TILE_W, 0*TX_TILE_H),
		new v2(1*TX_TILE_W, 1*TX_TILE_H)
	],
	TX_WALL = [
		new v2(1*TX_TILE_W, 0*TX_TILE_H),
		new v2(2*TX_TILE_W, 1*TX_TILE_H)
	],
	TX_CRATE = [
		new v2(0*TX_TILE_W, 1*TX_TILE_H),
		new v2(1*TX_TILE_W, 2*TX_TILE_H)
	],
	TX_CHAR = [
		new v2(1*TX_TILE_W, 1*TX_TILE_H),
		new v2(2*TX_TILE_W, 2*TX_TILE_H)
	],
	TX_CRATE_TARGET = [
		new v2(2*TX_TILE_W, 0*TX_TILE_H),
		new v2(3*TX_TILE_W, 1*TX_TILE_H)
	];

let tilemapWidth = 21;
let tilemapHeight = 13;
let tilemap = [
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1, 1, 1, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1, 0, 0, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0,
	0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 4, 4, 1, 0,
	0, 1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 1, 0,
	0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 3, 1, 1, 0, 0, 4, 4, 1, 0,
	0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
];
let entities = [];
let backgroundEntities = [];
let playerEntity = new Entity('char', 0, 0, false, TX_CHAR);
for(let tilemapIndex = 0;
	tilemapIndex < tilemap.length;
	tilemapIndex++)
{
	let x = TILE_SIZE * (tilemapIndex % tilemapWidth);
	let y = TILE_SIZE * (Math.floor(tilemapIndex / tilemapWidth));
	let tileType = tilemap[tilemapIndex];
	
	switch(tileType)
	{
		case 1:
			entities.push(new Entity('wall', x, y, true, TX_WALL));
			break;
		case 2:
			entities.push(new Entity('crate', x, y, true, TX_CRATE));
			break;
		case 3:
			playerEntity.pos.x = x;
			playerEntity.pos.y = y;
			break;
	}

	backgroundEntities.push(new Entity(
		'dirt', x, y, true, TX_DIRT
	));
}

let collisionMap = [];

const vertexShader = createShader(gl.VERTEX_SHADER, vertexShaderSource);
const fragmentShader = createShader(gl.FRAGMENT_SHADER, fragmentShaderSource);

let attribs = [];
attribs.push(new Attrib('aPosition', 2, 0));
attribs.push(new Attrib('aTexCoord', 2, 2*floatSize));

let uniforms = [];
uniforms.push(new Uniform('uniform2f', 'uResolution'));
uniforms.push(new Uniform('uniformMatrix4fv', 'uMatrix'));
uniforms.push(new Uniform('uniform1i', 'uTexture'));

const shaderProgram = new Program(
	vertexShader,
	fragmentShader,
	4*floatSize,
	attribs,
	uniforms
);

attribs = [];
attribs.push(new Attrib('aPosition', 2, 0));
attribs.push(new Attrib('aColor', 4, 2*floatSize));

uniforms = [];
uniforms.push(new Uniform('uniform2f', 'uResolution'));
uniforms.push(new Uniform('uniformMatrix4fv', 'uMatrix'));

const floorBuffer = gl.createBuffer();
const floorIndexBuffer = gl.createBuffer();
const entityBuffer = gl.createBuffer();
const entityIndexBuffer = gl.createBuffer();

let floorVertexData = [];
bindArrayBuffer(floorBuffer);
fillVertexBuffer(floorVertexData);

let floorIndexData = [];
fillRectIndexData(floorIndexData, floorVertexData.length/4);
bindElementBuffer(floorIndexBuffer);
fillIndexBuffer(floorIndexData);

let entityVertexData = [];
fillEntitiesVertexData(entityVertexData, backgroundEntities, TILE_SIZE);
fillEntitiesVertexData(entityVertexData, entities, TILE_SIZE);
fillEntityVertexData(entityVertexData, playerEntity, TILE_SIZE);
bindArrayBuffer(entityBuffer);
fillVertexBuffer(entityVertexData);

let entityIndexData = [];
fillRectIndexData(entityIndexData, entityVertexData.length/4);
bindElementBuffer(entityIndexBuffer);
fillIndexBuffer(entityIndexData);

gl.activeTexture(gl.TEXTURE0);
gl.bindTexture(gl.TEXTURE_2D, txAtlas);
gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
gl.bindTexture(gl.TEXTURE_2D, null);

let settings = {
	zoom: new v2(1.5, 1.5),
	resolution: [canvasWidth, canvasHeight]
};
let matrix = mat4.create();
mat4.scale(matrix, matrix, [1.5, 1.5, 1]);
shaderProgram.setAttribs();
shaderProgram.setUniform('uResolution', settings.resolution);
shaderProgram.setUniform('uTexture', 0);
shaderProgram.setUniform('uMatrix', [false, matrix]);

function update()
{
	requestAnimationFrame(update);

	for(let keyIndex = 0;
		keyIndex < rawInput.length;
		keyIndex++)
	{
		let newKey = rawInput[keyIndex],
			oldKey = oldRawInput[keyIndex];

		switch(oldKey)
		{
			case 0:
			{
				input[keyIndex] = (newKey == 0)
					? KEYSTATE_UP
					: KEYSTATE_PRESS;
			} break;

			case 1:
			{
				input[keyIndex] = (newKey == 1)
					? KEYSTATE_DOWN
					: KEYSTATE_RELEASE;
			} break;
		}
	}

	let moving = false;
	if(input[KEY_W] == KEYSTATE_PRESS)
	{
		
	}
	else if(input[KEY_S] == KEYSTATE_PRESS)
	{
	}
	else if(input[KEY_A] == KEYSTATE_PRESS)
	{
	}
	else if(input[KEY_D] == KEYSTATE_PRESS)
	{
	}
	if(moving)
	{
	}

	Object.assign(oldRawInput, rawInput);

	let entityVertexData = [];
	fillEntitiesVertexData(entityVertexData, backgroundEntities, TILE_SIZE);
	fillEntitiesVertexData(entityVertexData, entities, TILE_SIZE);
	fillEntityVertexData(entityVertexData, playerEntity, TILE_SIZE);
	gl.bindBuffer(gl.ARRAY_BUFFER, entityBuffer);
	fillVertexBuffer(entityVertexData);

	let entityIndexData = [];
	fillRectIndexData(entityIndexData, entityVertexData.length/4);
	gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, entityIndexBuffer);
	fillIndexBuffer(entityIndexData);

	bindArrayBuffer(floorBuffer);
	bindElementBuffer(floorIndexBuffer);
	shaderProgram.setAttribs();
	drawBuffer(gl.TRIANGLES, floorIndexData.length, true);

	bindArrayBuffer(entityBuffer);
	bindElementBuffer(entityIndexBuffer);
	shaderProgram.setAttribs();
	drawBuffer(gl.TRIANGLES, entityIndexData.length, true);
}

update();